// -- General --

// Remove default padding etc
*, *::before, *::after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

// Set overflow rules
html {
    overflow-y: scroll;
}

// Set font
body {
    font-family: 'Inter', sans-serif;
}



// -- Colours --

// Set colour variables
$colours: (
    'body'     : #151515,
    'bodyL'    : #202020,
    'primary'  : #FFFFFF,
    'secondary': #c1d0e0,
    'tertiary' : #98A2A9,
    'disabled' : #728088,
);

// Define colour function
@function colour($colour-name) {
    @return map-get($colours, $colour-name)
};



// -- Layout --

@mixin flexSpaceEvenly {
    display: flex;
    justify-content: space-evenly;
}

@mixin flexCenter($direction) {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: $direction;
}



// -- Text --

// Font-Size

// Set min font size (rem)
$min-size: (
    'header'   : 2rem,
    'primary'  : 1.125rem,
    'secondary': 1rem,
    'tertiary' : 1rem
);

// Define min-size function
@function min-size($size-name) {
    @return map-get($min-size, $size-name)
};

// Define responsive size
$font-sizes: (
    'header'   : clamp(min-size(header), 6.25vw, calc(min-size(header)*1.25)),
    'primary'   : clamp(min-size(primary), 6.25vw, calc(min-size(primary)*1.25)),
    'secondary'   : clamp(min-size(secondary), 6.25vw, calc(min-size(secondary)*1.25)),
    'tertiary'   : clamp(min-size(tertiary), 6.25vw, calc(min-size(tertiary)*1.25)),
);

// Define size function
@function size($size-name) {
    @return map-get($font-sizes, $size-name)
};


// Font-Weight

// Set weight variables
$font-weights: (
    'regular': 400,
    'medium' : 500,
);

// Define weight function
@function weight($weight-name) {
    @return map-get($font-weights, $weight-name)
};


// Line-Height

// Notes:
// Input: lineHeight([font-size in rem])
// Output: line-height

// 16px font size = 145% line height
// 48px font size = 120% line height
@function height($font-size) {
    @return calc(((-0.78125 * ($font-size * 16)) + 157.5) / 100)
};



// -- Transitions -- 

// Set transition variables
$duration: (
    'slow': 200ms,
    'medium': 160ms,
    'fast': 120ms,
);

// Define transition function
@function duration($TD-name) {
    @return map-get($duration, $TD-name)
};



// -- Media Queries --

// Dark Mode
@mixin media-dark{
    @media (prefers-color-scheme: dark) {
        @content;
    }
}

// Mobile
@mixin media-xs {
    @media screen and (max-width: 599px) {
        @content;
    }
}

// Tablet
@mixin media-sm {
    @media screen and (min-width: 600px) {
        @content;
    }
}

// Laptop
@mixin media-md {
    @media screen and (min-width: 900px) {
        @content;
    }
}

// Desktop
@mixin media-lg {
    @media screen and (min-width: 1200px) {
        @content;
    }
}

// Desktop (Large)
@mixin media-xl {
    @media screen and (min-width: 1800px) {
        @content;
    }
}